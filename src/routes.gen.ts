/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SetInterestImport } from './routes/set-interest'
import { Route as SetGroupImport } from './routes/set-group'
import { Route as LoadingImport } from './routes/loading'
import { Route as BootstrapRelaysImport } from './routes/bootstrap-relays'
import { Route as IndexImport } from './routes/index'
import { Route as EditorIndexImport } from './routes/editor/index'
import { Route as ZapIdImport } from './routes/zap.$id'
import { Route as ColumnsLayoutImport } from './routes/columns/_layout'
import { Route as AccountBackupImport } from './routes/$account/backup'
import { Route as AccountAppImport } from './routes/$account/_app'
import { Route as ColumnsLayoutStoriesImport } from './routes/columns/_layout/stories'
import { Route as ColumnsLayoutNewsfeedImport } from './routes/columns/_layout/newsfeed'
import { Route as ColumnsLayoutGlobalImport } from './routes/columns/_layout/global'
import { Route as ColumnsLayoutCreateNewsfeedImport } from './routes/columns/_layout/create-newsfeed'
import { Route as AccountSettingsWalletImport } from './routes/$account/_settings/wallet'
import { Route as AccountSettingsRelayImport } from './routes/$account/_settings/relay'
import { Route as AccountSettingsProfileImport } from './routes/$account/_settings/profile'
import { Route as AccountSettingsGeneralImport } from './routes/$account/_settings/general'
import { Route as AccountSettingsBitcoinConnectImport } from './routes/$account/_settings/bitcoin-connect'
import { Route as AccountAppHomeImport } from './routes/$account/_app/home'
import { Route as ColumnsLayoutInterestsIdImport } from './routes/columns/_layout/interests.$id'
import { Route as ColumnsLayoutGroupsIdImport } from './routes/columns/_layout/groups.$id'
import { Route as ColumnsLayoutCreateNewsfeedUsersImport } from './routes/columns/_layout/create-newsfeed.users'
import { Route as ColumnsLayoutCreateNewsfeedF2fImport } from './routes/columns/_layout/create-newsfeed.f2f'

// Create Virtual Routes

const ColumnsImport = createFileRoute('/columns')()
const AccountImport = createFileRoute('/$account')()
const ResetLazyImport = createFileRoute('/reset')()
const NewLazyImport = createFileRoute('/new')()
const AuthNewLazyImport = createFileRoute('/auth/new')()
const AuthImportLazyImport = createFileRoute('/auth/import')()
const AuthConnectLazyImport = createFileRoute('/auth/connect')()
const AccountSettingsLazyImport = createFileRoute('/$account/_settings')()
const ColumnsLayoutTrendingLazyImport = createFileRoute(
  '/columns/_layout/trending',
)()
const ColumnsLayoutSearchLazyImport = createFileRoute(
  '/columns/_layout/search',
)()
const ColumnsLayoutOnboardingLazyImport = createFileRoute(
  '/columns/_layout/onboarding',
)()
const ColumnsLayoutNotificationLazyImport = createFileRoute(
  '/columns/_layout/notification',
)()
const ColumnsLayoutGalleryLazyImport = createFileRoute(
  '/columns/_layout/gallery',
)()
const ColumnsLayoutUsersIdLazyImport = createFileRoute(
  '/columns/_layout/users/$id',
)()
const ColumnsLayoutRepliesIdLazyImport = createFileRoute(
  '/columns/_layout/replies/$id',
)()
const ColumnsLayoutEventsIdLazyImport = createFileRoute(
  '/columns/_layout/events/$id',
)()

// Create/Update Routes

const ColumnsRoute = ColumnsImport.update({
  path: '/columns',
  getParentRoute: () => rootRoute,
} as any)

const AccountRoute = AccountImport.update({
  path: '/$account',
  getParentRoute: () => rootRoute,
} as any)

const ResetLazyRoute = ResetLazyImport.update({
  path: '/reset',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/reset.lazy').then((d) => d.Route))

const NewLazyRoute = NewLazyImport.update({
  path: '/new',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/new.lazy').then((d) => d.Route))

const SetInterestRoute = SetInterestImport.update({
  path: '/set-interest',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/set-interest.lazy').then((d) => d.Route))

const SetGroupRoute = SetGroupImport.update({
  path: '/set-group',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/set-group.lazy').then((d) => d.Route))

const LoadingRoute = LoadingImport.update({
  path: '/loading',
  getParentRoute: () => rootRoute,
} as any)

const BootstrapRelaysRoute = BootstrapRelaysImport.update({
  path: '/bootstrap-relays',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/bootstrap-relays.lazy').then((d) => d.Route),
)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const EditorIndexRoute = EditorIndexImport.update({
  path: '/editor/',
  getParentRoute: () => rootRoute,
} as any)

const AuthNewLazyRoute = AuthNewLazyImport.update({
  path: '/auth/new',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/auth/new.lazy').then((d) => d.Route))

const AuthImportLazyRoute = AuthImportLazyImport.update({
  path: '/auth/import',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/auth/import.lazy').then((d) => d.Route))

const AuthConnectLazyRoute = AuthConnectLazyImport.update({
  path: '/auth/connect',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/auth/connect.lazy').then((d) => d.Route))

const AccountSettingsLazyRoute = AccountSettingsLazyImport.update({
  id: '/_settings',
  getParentRoute: () => AccountRoute,
} as any).lazy(() =>
  import('./routes/$account/_settings.lazy').then((d) => d.Route),
)

const ZapIdRoute = ZapIdImport.update({
  path: '/zap/$id',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/zap.$id.lazy').then((d) => d.Route))

const ColumnsLayoutRoute = ColumnsLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => ColumnsRoute,
} as any)

const AccountBackupRoute = AccountBackupImport.update({
  path: '/backup',
  getParentRoute: () => AccountRoute,
} as any)

const AccountAppRoute = AccountAppImport.update({
  id: '/_app',
  getParentRoute: () => AccountRoute,
} as any).lazy(() => import('./routes/$account/_app.lazy').then((d) => d.Route))

const ColumnsLayoutTrendingLazyRoute = ColumnsLayoutTrendingLazyImport.update({
  path: '/trending',
  getParentRoute: () => ColumnsLayoutRoute,
} as any).lazy(() =>
  import('./routes/columns/_layout/trending.lazy').then((d) => d.Route),
)

const ColumnsLayoutSearchLazyRoute = ColumnsLayoutSearchLazyImport.update({
  path: '/search',
  getParentRoute: () => ColumnsLayoutRoute,
} as any).lazy(() =>
  import('./routes/columns/_layout/search.lazy').then((d) => d.Route),
)

const ColumnsLayoutOnboardingLazyRoute =
  ColumnsLayoutOnboardingLazyImport.update({
    path: '/onboarding',
    getParentRoute: () => ColumnsLayoutRoute,
  } as any).lazy(() =>
    import('./routes/columns/_layout/onboarding.lazy').then((d) => d.Route),
  )

const ColumnsLayoutNotificationLazyRoute =
  ColumnsLayoutNotificationLazyImport.update({
    path: '/notification',
    getParentRoute: () => ColumnsLayoutRoute,
  } as any).lazy(() =>
    import('./routes/columns/_layout/notification.lazy').then((d) => d.Route),
  )

const ColumnsLayoutGalleryLazyRoute = ColumnsLayoutGalleryLazyImport.update({
  path: '/gallery',
  getParentRoute: () => ColumnsLayoutRoute,
} as any).lazy(() =>
  import('./routes/columns/_layout/gallery.lazy').then((d) => d.Route),
)

const ColumnsLayoutStoriesRoute = ColumnsLayoutStoriesImport.update({
  path: '/stories',
  getParentRoute: () => ColumnsLayoutRoute,
} as any).lazy(() =>
  import('./routes/columns/_layout/stories.lazy').then((d) => d.Route),
)

const ColumnsLayoutNewsfeedRoute = ColumnsLayoutNewsfeedImport.update({
  path: '/newsfeed',
  getParentRoute: () => ColumnsLayoutRoute,
} as any).lazy(() =>
  import('./routes/columns/_layout/newsfeed.lazy').then((d) => d.Route),
)

const ColumnsLayoutGlobalRoute = ColumnsLayoutGlobalImport.update({
  path: '/global',
  getParentRoute: () => ColumnsLayoutRoute,
} as any)

const ColumnsLayoutCreateNewsfeedRoute =
  ColumnsLayoutCreateNewsfeedImport.update({
    path: '/create-newsfeed',
    getParentRoute: () => ColumnsLayoutRoute,
  } as any)

const AccountSettingsWalletRoute = AccountSettingsWalletImport.update({
  path: '/wallet',
  getParentRoute: () => AccountSettingsLazyRoute,
} as any).lazy(() =>
  import('./routes/$account/_settings/wallet.lazy').then((d) => d.Route),
)

const AccountSettingsRelayRoute = AccountSettingsRelayImport.update({
  path: '/relay',
  getParentRoute: () => AccountSettingsLazyRoute,
} as any).lazy(() =>
  import('./routes/$account/_settings/relay.lazy').then((d) => d.Route),
)

const AccountSettingsProfileRoute = AccountSettingsProfileImport.update({
  path: '/profile',
  getParentRoute: () => AccountSettingsLazyRoute,
} as any).lazy(() =>
  import('./routes/$account/_settings/profile.lazy').then((d) => d.Route),
)

const AccountSettingsGeneralRoute = AccountSettingsGeneralImport.update({
  path: '/general',
  getParentRoute: () => AccountSettingsLazyRoute,
} as any).lazy(() =>
  import('./routes/$account/_settings/general.lazy').then((d) => d.Route),
)

const AccountSettingsBitcoinConnectRoute =
  AccountSettingsBitcoinConnectImport.update({
    path: '/bitcoin-connect',
    getParentRoute: () => AccountSettingsLazyRoute,
  } as any).lazy(() =>
    import('./routes/$account/_settings/bitcoin-connect.lazy').then(
      (d) => d.Route,
    ),
  )

const AccountAppHomeRoute = AccountAppHomeImport.update({
  path: '/home',
  getParentRoute: () => AccountAppRoute,
} as any).lazy(() =>
  import('./routes/$account/_app/home.lazy').then((d) => d.Route),
)

const ColumnsLayoutUsersIdLazyRoute = ColumnsLayoutUsersIdLazyImport.update({
  path: '/users/$id',
  getParentRoute: () => ColumnsLayoutRoute,
} as any).lazy(() =>
  import('./routes/columns/_layout/users.$id.lazy').then((d) => d.Route),
)

const ColumnsLayoutRepliesIdLazyRoute = ColumnsLayoutRepliesIdLazyImport.update(
  {
    path: '/replies/$id',
    getParentRoute: () => ColumnsLayoutRoute,
  } as any,
).lazy(() =>
  import('./routes/columns/_layout/replies.$id.lazy').then((d) => d.Route),
)

const ColumnsLayoutEventsIdLazyRoute = ColumnsLayoutEventsIdLazyImport.update({
  path: '/events/$id',
  getParentRoute: () => ColumnsLayoutRoute,
} as any).lazy(() =>
  import('./routes/columns/_layout/events.$id.lazy').then((d) => d.Route),
)

const ColumnsLayoutInterestsIdRoute = ColumnsLayoutInterestsIdImport.update({
  path: '/interests/$id',
  getParentRoute: () => ColumnsLayoutRoute,
} as any).lazy(() =>
  import('./routes/columns/_layout/interests.$id.lazy').then((d) => d.Route),
)

const ColumnsLayoutGroupsIdRoute = ColumnsLayoutGroupsIdImport.update({
  path: '/groups/$id',
  getParentRoute: () => ColumnsLayoutRoute,
} as any).lazy(() =>
  import('./routes/columns/_layout/groups.$id.lazy').then((d) => d.Route),
)

const ColumnsLayoutCreateNewsfeedUsersRoute =
  ColumnsLayoutCreateNewsfeedUsersImport.update({
    path: '/users',
    getParentRoute: () => ColumnsLayoutCreateNewsfeedRoute,
  } as any)

const ColumnsLayoutCreateNewsfeedF2fRoute =
  ColumnsLayoutCreateNewsfeedF2fImport.update({
    path: '/f2f',
    getParentRoute: () => ColumnsLayoutCreateNewsfeedRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/bootstrap-relays': {
      id: '/bootstrap-relays'
      path: '/bootstrap-relays'
      fullPath: '/bootstrap-relays'
      preLoaderRoute: typeof BootstrapRelaysImport
      parentRoute: typeof rootRoute
    }
    '/loading': {
      id: '/loading'
      path: '/loading'
      fullPath: '/loading'
      preLoaderRoute: typeof LoadingImport
      parentRoute: typeof rootRoute
    }
    '/set-group': {
      id: '/set-group'
      path: '/set-group'
      fullPath: '/set-group'
      preLoaderRoute: typeof SetGroupImport
      parentRoute: typeof rootRoute
    }
    '/set-interest': {
      id: '/set-interest'
      path: '/set-interest'
      fullPath: '/set-interest'
      preLoaderRoute: typeof SetInterestImport
      parentRoute: typeof rootRoute
    }
    '/new': {
      id: '/new'
      path: '/new'
      fullPath: '/new'
      preLoaderRoute: typeof NewLazyImport
      parentRoute: typeof rootRoute
    }
    '/reset': {
      id: '/reset'
      path: '/reset'
      fullPath: '/reset'
      preLoaderRoute: typeof ResetLazyImport
      parentRoute: typeof rootRoute
    }
    '/$account': {
      id: '/$account'
      path: '/$account'
      fullPath: '/$account'
      preLoaderRoute: typeof AccountImport
      parentRoute: typeof rootRoute
    }
    '/$account/_app': {
      id: '/$account/_app'
      path: '/$account'
      fullPath: '/$account'
      preLoaderRoute: typeof AccountAppImport
      parentRoute: typeof AccountRoute
    }
    '/$account/backup': {
      id: '/$account/backup'
      path: '/backup'
      fullPath: '/$account/backup'
      preLoaderRoute: typeof AccountBackupImport
      parentRoute: typeof AccountImport
    }
    '/columns': {
      id: '/columns'
      path: '/columns'
      fullPath: '/columns'
      preLoaderRoute: typeof ColumnsImport
      parentRoute: typeof rootRoute
    }
    '/columns/_layout': {
      id: '/columns/_layout'
      path: '/columns'
      fullPath: '/columns'
      preLoaderRoute: typeof ColumnsLayoutImport
      parentRoute: typeof ColumnsRoute
    }
    '/zap/$id': {
      id: '/zap/$id'
      path: '/zap/$id'
      fullPath: '/zap/$id'
      preLoaderRoute: typeof ZapIdImport
      parentRoute: typeof rootRoute
    }
    '/$account/_settings': {
      id: '/$account/_settings'
      path: ''
      fullPath: '/$account'
      preLoaderRoute: typeof AccountSettingsLazyImport
      parentRoute: typeof AccountImport
    }
    '/auth/connect': {
      id: '/auth/connect'
      path: '/auth/connect'
      fullPath: '/auth/connect'
      preLoaderRoute: typeof AuthConnectLazyImport
      parentRoute: typeof rootRoute
    }
    '/auth/import': {
      id: '/auth/import'
      path: '/auth/import'
      fullPath: '/auth/import'
      preLoaderRoute: typeof AuthImportLazyImport
      parentRoute: typeof rootRoute
    }
    '/auth/new': {
      id: '/auth/new'
      path: '/auth/new'
      fullPath: '/auth/new'
      preLoaderRoute: typeof AuthNewLazyImport
      parentRoute: typeof rootRoute
    }
    '/editor/': {
      id: '/editor/'
      path: '/editor'
      fullPath: '/editor'
      preLoaderRoute: typeof EditorIndexImport
      parentRoute: typeof rootRoute
    }
    '/$account/_app/home': {
      id: '/$account/_app/home'
      path: '/home'
      fullPath: '/$account/home'
      preLoaderRoute: typeof AccountAppHomeImport
      parentRoute: typeof AccountAppImport
    }
    '/$account/_settings/bitcoin-connect': {
      id: '/$account/_settings/bitcoin-connect'
      path: '/bitcoin-connect'
      fullPath: '/$account/bitcoin-connect'
      preLoaderRoute: typeof AccountSettingsBitcoinConnectImport
      parentRoute: typeof AccountSettingsLazyImport
    }
    '/$account/_settings/general': {
      id: '/$account/_settings/general'
      path: '/general'
      fullPath: '/$account/general'
      preLoaderRoute: typeof AccountSettingsGeneralImport
      parentRoute: typeof AccountSettingsLazyImport
    }
    '/$account/_settings/profile': {
      id: '/$account/_settings/profile'
      path: '/profile'
      fullPath: '/$account/profile'
      preLoaderRoute: typeof AccountSettingsProfileImport
      parentRoute: typeof AccountSettingsLazyImport
    }
    '/$account/_settings/relay': {
      id: '/$account/_settings/relay'
      path: '/relay'
      fullPath: '/$account/relay'
      preLoaderRoute: typeof AccountSettingsRelayImport
      parentRoute: typeof AccountSettingsLazyImport
    }
    '/$account/_settings/wallet': {
      id: '/$account/_settings/wallet'
      path: '/wallet'
      fullPath: '/$account/wallet'
      preLoaderRoute: typeof AccountSettingsWalletImport
      parentRoute: typeof AccountSettingsLazyImport
    }
    '/columns/_layout/create-newsfeed': {
      id: '/columns/_layout/create-newsfeed'
      path: '/create-newsfeed'
      fullPath: '/columns/create-newsfeed'
      preLoaderRoute: typeof ColumnsLayoutCreateNewsfeedImport
      parentRoute: typeof ColumnsLayoutImport
    }
    '/columns/_layout/global': {
      id: '/columns/_layout/global'
      path: '/global'
      fullPath: '/columns/global'
      preLoaderRoute: typeof ColumnsLayoutGlobalImport
      parentRoute: typeof ColumnsLayoutImport
    }
    '/columns/_layout/newsfeed': {
      id: '/columns/_layout/newsfeed'
      path: '/newsfeed'
      fullPath: '/columns/newsfeed'
      preLoaderRoute: typeof ColumnsLayoutNewsfeedImport
      parentRoute: typeof ColumnsLayoutImport
    }
    '/columns/_layout/stories': {
      id: '/columns/_layout/stories'
      path: '/stories'
      fullPath: '/columns/stories'
      preLoaderRoute: typeof ColumnsLayoutStoriesImport
      parentRoute: typeof ColumnsLayoutImport
    }
    '/columns/_layout/gallery': {
      id: '/columns/_layout/gallery'
      path: '/gallery'
      fullPath: '/columns/gallery'
      preLoaderRoute: typeof ColumnsLayoutGalleryLazyImport
      parentRoute: typeof ColumnsLayoutImport
    }
    '/columns/_layout/notification': {
      id: '/columns/_layout/notification'
      path: '/notification'
      fullPath: '/columns/notification'
      preLoaderRoute: typeof ColumnsLayoutNotificationLazyImport
      parentRoute: typeof ColumnsLayoutImport
    }
    '/columns/_layout/onboarding': {
      id: '/columns/_layout/onboarding'
      path: '/onboarding'
      fullPath: '/columns/onboarding'
      preLoaderRoute: typeof ColumnsLayoutOnboardingLazyImport
      parentRoute: typeof ColumnsLayoutImport
    }
    '/columns/_layout/search': {
      id: '/columns/_layout/search'
      path: '/search'
      fullPath: '/columns/search'
      preLoaderRoute: typeof ColumnsLayoutSearchLazyImport
      parentRoute: typeof ColumnsLayoutImport
    }
    '/columns/_layout/trending': {
      id: '/columns/_layout/trending'
      path: '/trending'
      fullPath: '/columns/trending'
      preLoaderRoute: typeof ColumnsLayoutTrendingLazyImport
      parentRoute: typeof ColumnsLayoutImport
    }
    '/columns/_layout/create-newsfeed/f2f': {
      id: '/columns/_layout/create-newsfeed/f2f'
      path: '/f2f'
      fullPath: '/columns/create-newsfeed/f2f'
      preLoaderRoute: typeof ColumnsLayoutCreateNewsfeedF2fImport
      parentRoute: typeof ColumnsLayoutCreateNewsfeedImport
    }
    '/columns/_layout/create-newsfeed/users': {
      id: '/columns/_layout/create-newsfeed/users'
      path: '/users'
      fullPath: '/columns/create-newsfeed/users'
      preLoaderRoute: typeof ColumnsLayoutCreateNewsfeedUsersImport
      parentRoute: typeof ColumnsLayoutCreateNewsfeedImport
    }
    '/columns/_layout/groups/$id': {
      id: '/columns/_layout/groups/$id'
      path: '/groups/$id'
      fullPath: '/columns/groups/$id'
      preLoaderRoute: typeof ColumnsLayoutGroupsIdImport
      parentRoute: typeof ColumnsLayoutImport
    }
    '/columns/_layout/interests/$id': {
      id: '/columns/_layout/interests/$id'
      path: '/interests/$id'
      fullPath: '/columns/interests/$id'
      preLoaderRoute: typeof ColumnsLayoutInterestsIdImport
      parentRoute: typeof ColumnsLayoutImport
    }
    '/columns/_layout/events/$id': {
      id: '/columns/_layout/events/$id'
      path: '/events/$id'
      fullPath: '/columns/events/$id'
      preLoaderRoute: typeof ColumnsLayoutEventsIdLazyImport
      parentRoute: typeof ColumnsLayoutImport
    }
    '/columns/_layout/replies/$id': {
      id: '/columns/_layout/replies/$id'
      path: '/replies/$id'
      fullPath: '/columns/replies/$id'
      preLoaderRoute: typeof ColumnsLayoutRepliesIdLazyImport
      parentRoute: typeof ColumnsLayoutImport
    }
    '/columns/_layout/users/$id': {
      id: '/columns/_layout/users/$id'
      path: '/users/$id'
      fullPath: '/columns/users/$id'
      preLoaderRoute: typeof ColumnsLayoutUsersIdLazyImport
      parentRoute: typeof ColumnsLayoutImport
    }
  }
}

// Create and export the route tree

interface AccountAppRouteChildren {
  AccountAppHomeRoute: typeof AccountAppHomeRoute
}

const AccountAppRouteChildren: AccountAppRouteChildren = {
  AccountAppHomeRoute: AccountAppHomeRoute,
}

const AccountAppRouteWithChildren = AccountAppRoute._addFileChildren(
  AccountAppRouteChildren,
)

interface AccountSettingsLazyRouteChildren {
  AccountSettingsBitcoinConnectRoute: typeof AccountSettingsBitcoinConnectRoute
  AccountSettingsGeneralRoute: typeof AccountSettingsGeneralRoute
  AccountSettingsProfileRoute: typeof AccountSettingsProfileRoute
  AccountSettingsRelayRoute: typeof AccountSettingsRelayRoute
  AccountSettingsWalletRoute: typeof AccountSettingsWalletRoute
}

const AccountSettingsLazyRouteChildren: AccountSettingsLazyRouteChildren = {
  AccountSettingsBitcoinConnectRoute: AccountSettingsBitcoinConnectRoute,
  AccountSettingsGeneralRoute: AccountSettingsGeneralRoute,
  AccountSettingsProfileRoute: AccountSettingsProfileRoute,
  AccountSettingsRelayRoute: AccountSettingsRelayRoute,
  AccountSettingsWalletRoute: AccountSettingsWalletRoute,
}

const AccountSettingsLazyRouteWithChildren =
  AccountSettingsLazyRoute._addFileChildren(AccountSettingsLazyRouteChildren)

interface AccountRouteChildren {
  AccountAppRoute: typeof AccountAppRouteWithChildren
  AccountBackupRoute: typeof AccountBackupRoute
  AccountSettingsLazyRoute: typeof AccountSettingsLazyRouteWithChildren
}

const AccountRouteChildren: AccountRouteChildren = {
  AccountAppRoute: AccountAppRouteWithChildren,
  AccountBackupRoute: AccountBackupRoute,
  AccountSettingsLazyRoute: AccountSettingsLazyRouteWithChildren,
}

const AccountRouteWithChildren =
  AccountRoute._addFileChildren(AccountRouteChildren)

interface ColumnsLayoutCreateNewsfeedRouteChildren {
  ColumnsLayoutCreateNewsfeedF2fRoute: typeof ColumnsLayoutCreateNewsfeedF2fRoute
  ColumnsLayoutCreateNewsfeedUsersRoute: typeof ColumnsLayoutCreateNewsfeedUsersRoute
}

const ColumnsLayoutCreateNewsfeedRouteChildren: ColumnsLayoutCreateNewsfeedRouteChildren =
  {
    ColumnsLayoutCreateNewsfeedF2fRoute: ColumnsLayoutCreateNewsfeedF2fRoute,
    ColumnsLayoutCreateNewsfeedUsersRoute:
      ColumnsLayoutCreateNewsfeedUsersRoute,
  }

const ColumnsLayoutCreateNewsfeedRouteWithChildren =
  ColumnsLayoutCreateNewsfeedRoute._addFileChildren(
    ColumnsLayoutCreateNewsfeedRouteChildren,
  )

interface ColumnsLayoutRouteChildren {
  ColumnsLayoutCreateNewsfeedRoute: typeof ColumnsLayoutCreateNewsfeedRouteWithChildren
  ColumnsLayoutGlobalRoute: typeof ColumnsLayoutGlobalRoute
  ColumnsLayoutNewsfeedRoute: typeof ColumnsLayoutNewsfeedRoute
  ColumnsLayoutStoriesRoute: typeof ColumnsLayoutStoriesRoute
  ColumnsLayoutGalleryLazyRoute: typeof ColumnsLayoutGalleryLazyRoute
  ColumnsLayoutNotificationLazyRoute: typeof ColumnsLayoutNotificationLazyRoute
  ColumnsLayoutOnboardingLazyRoute: typeof ColumnsLayoutOnboardingLazyRoute
  ColumnsLayoutSearchLazyRoute: typeof ColumnsLayoutSearchLazyRoute
  ColumnsLayoutTrendingLazyRoute: typeof ColumnsLayoutTrendingLazyRoute
  ColumnsLayoutGroupsIdRoute: typeof ColumnsLayoutGroupsIdRoute
  ColumnsLayoutInterestsIdRoute: typeof ColumnsLayoutInterestsIdRoute
  ColumnsLayoutEventsIdLazyRoute: typeof ColumnsLayoutEventsIdLazyRoute
  ColumnsLayoutRepliesIdLazyRoute: typeof ColumnsLayoutRepliesIdLazyRoute
  ColumnsLayoutUsersIdLazyRoute: typeof ColumnsLayoutUsersIdLazyRoute
}

const ColumnsLayoutRouteChildren: ColumnsLayoutRouteChildren = {
  ColumnsLayoutCreateNewsfeedRoute:
    ColumnsLayoutCreateNewsfeedRouteWithChildren,
  ColumnsLayoutGlobalRoute: ColumnsLayoutGlobalRoute,
  ColumnsLayoutNewsfeedRoute: ColumnsLayoutNewsfeedRoute,
  ColumnsLayoutStoriesRoute: ColumnsLayoutStoriesRoute,
  ColumnsLayoutGalleryLazyRoute: ColumnsLayoutGalleryLazyRoute,
  ColumnsLayoutNotificationLazyRoute: ColumnsLayoutNotificationLazyRoute,
  ColumnsLayoutOnboardingLazyRoute: ColumnsLayoutOnboardingLazyRoute,
  ColumnsLayoutSearchLazyRoute: ColumnsLayoutSearchLazyRoute,
  ColumnsLayoutTrendingLazyRoute: ColumnsLayoutTrendingLazyRoute,
  ColumnsLayoutGroupsIdRoute: ColumnsLayoutGroupsIdRoute,
  ColumnsLayoutInterestsIdRoute: ColumnsLayoutInterestsIdRoute,
  ColumnsLayoutEventsIdLazyRoute: ColumnsLayoutEventsIdLazyRoute,
  ColumnsLayoutRepliesIdLazyRoute: ColumnsLayoutRepliesIdLazyRoute,
  ColumnsLayoutUsersIdLazyRoute: ColumnsLayoutUsersIdLazyRoute,
}

const ColumnsLayoutRouteWithChildren = ColumnsLayoutRoute._addFileChildren(
  ColumnsLayoutRouteChildren,
)

interface ColumnsRouteChildren {
  ColumnsLayoutRoute: typeof ColumnsLayoutRouteWithChildren
}

const ColumnsRouteChildren: ColumnsRouteChildren = {
  ColumnsLayoutRoute: ColumnsLayoutRouteWithChildren,
}

const ColumnsRouteWithChildren =
  ColumnsRoute._addFileChildren(ColumnsRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/bootstrap-relays': typeof BootstrapRelaysRoute
  '/loading': typeof LoadingRoute
  '/set-group': typeof SetGroupRoute
  '/set-interest': typeof SetInterestRoute
  '/new': typeof NewLazyRoute
  '/reset': typeof ResetLazyRoute
  '/$account': typeof AccountSettingsLazyRouteWithChildren
  '/$account/backup': typeof AccountBackupRoute
  '/columns': typeof ColumnsLayoutRouteWithChildren
  '/zap/$id': typeof ZapIdRoute
  '/auth/connect': typeof AuthConnectLazyRoute
  '/auth/import': typeof AuthImportLazyRoute
  '/auth/new': typeof AuthNewLazyRoute
  '/editor': typeof EditorIndexRoute
  '/$account/home': typeof AccountAppHomeRoute
  '/$account/bitcoin-connect': typeof AccountSettingsBitcoinConnectRoute
  '/$account/general': typeof AccountSettingsGeneralRoute
  '/$account/profile': typeof AccountSettingsProfileRoute
  '/$account/relay': typeof AccountSettingsRelayRoute
  '/$account/wallet': typeof AccountSettingsWalletRoute
  '/columns/create-newsfeed': typeof ColumnsLayoutCreateNewsfeedRouteWithChildren
  '/columns/global': typeof ColumnsLayoutGlobalRoute
  '/columns/newsfeed': typeof ColumnsLayoutNewsfeedRoute
  '/columns/stories': typeof ColumnsLayoutStoriesRoute
  '/columns/gallery': typeof ColumnsLayoutGalleryLazyRoute
  '/columns/notification': typeof ColumnsLayoutNotificationLazyRoute
  '/columns/onboarding': typeof ColumnsLayoutOnboardingLazyRoute
  '/columns/search': typeof ColumnsLayoutSearchLazyRoute
  '/columns/trending': typeof ColumnsLayoutTrendingLazyRoute
  '/columns/create-newsfeed/f2f': typeof ColumnsLayoutCreateNewsfeedF2fRoute
  '/columns/create-newsfeed/users': typeof ColumnsLayoutCreateNewsfeedUsersRoute
  '/columns/groups/$id': typeof ColumnsLayoutGroupsIdRoute
  '/columns/interests/$id': typeof ColumnsLayoutInterestsIdRoute
  '/columns/events/$id': typeof ColumnsLayoutEventsIdLazyRoute
  '/columns/replies/$id': typeof ColumnsLayoutRepliesIdLazyRoute
  '/columns/users/$id': typeof ColumnsLayoutUsersIdLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/bootstrap-relays': typeof BootstrapRelaysRoute
  '/loading': typeof LoadingRoute
  '/set-group': typeof SetGroupRoute
  '/set-interest': typeof SetInterestRoute
  '/new': typeof NewLazyRoute
  '/reset': typeof ResetLazyRoute
  '/$account': typeof AccountSettingsLazyRouteWithChildren
  '/$account/backup': typeof AccountBackupRoute
  '/columns': typeof ColumnsLayoutRouteWithChildren
  '/zap/$id': typeof ZapIdRoute
  '/auth/connect': typeof AuthConnectLazyRoute
  '/auth/import': typeof AuthImportLazyRoute
  '/auth/new': typeof AuthNewLazyRoute
  '/editor': typeof EditorIndexRoute
  '/$account/home': typeof AccountAppHomeRoute
  '/$account/bitcoin-connect': typeof AccountSettingsBitcoinConnectRoute
  '/$account/general': typeof AccountSettingsGeneralRoute
  '/$account/profile': typeof AccountSettingsProfileRoute
  '/$account/relay': typeof AccountSettingsRelayRoute
  '/$account/wallet': typeof AccountSettingsWalletRoute
  '/columns/create-newsfeed': typeof ColumnsLayoutCreateNewsfeedRouteWithChildren
  '/columns/global': typeof ColumnsLayoutGlobalRoute
  '/columns/newsfeed': typeof ColumnsLayoutNewsfeedRoute
  '/columns/stories': typeof ColumnsLayoutStoriesRoute
  '/columns/gallery': typeof ColumnsLayoutGalleryLazyRoute
  '/columns/notification': typeof ColumnsLayoutNotificationLazyRoute
  '/columns/onboarding': typeof ColumnsLayoutOnboardingLazyRoute
  '/columns/search': typeof ColumnsLayoutSearchLazyRoute
  '/columns/trending': typeof ColumnsLayoutTrendingLazyRoute
  '/columns/create-newsfeed/f2f': typeof ColumnsLayoutCreateNewsfeedF2fRoute
  '/columns/create-newsfeed/users': typeof ColumnsLayoutCreateNewsfeedUsersRoute
  '/columns/groups/$id': typeof ColumnsLayoutGroupsIdRoute
  '/columns/interests/$id': typeof ColumnsLayoutInterestsIdRoute
  '/columns/events/$id': typeof ColumnsLayoutEventsIdLazyRoute
  '/columns/replies/$id': typeof ColumnsLayoutRepliesIdLazyRoute
  '/columns/users/$id': typeof ColumnsLayoutUsersIdLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/bootstrap-relays': typeof BootstrapRelaysRoute
  '/loading': typeof LoadingRoute
  '/set-group': typeof SetGroupRoute
  '/set-interest': typeof SetInterestRoute
  '/new': typeof NewLazyRoute
  '/reset': typeof ResetLazyRoute
  '/$account': typeof AccountRouteWithChildren
  '/$account/_app': typeof AccountAppRouteWithChildren
  '/$account/backup': typeof AccountBackupRoute
  '/columns': typeof ColumnsRouteWithChildren
  '/columns/_layout': typeof ColumnsLayoutRouteWithChildren
  '/zap/$id': typeof ZapIdRoute
  '/$account/_settings': typeof AccountSettingsLazyRouteWithChildren
  '/auth/connect': typeof AuthConnectLazyRoute
  '/auth/import': typeof AuthImportLazyRoute
  '/auth/new': typeof AuthNewLazyRoute
  '/editor/': typeof EditorIndexRoute
  '/$account/_app/home': typeof AccountAppHomeRoute
  '/$account/_settings/bitcoin-connect': typeof AccountSettingsBitcoinConnectRoute
  '/$account/_settings/general': typeof AccountSettingsGeneralRoute
  '/$account/_settings/profile': typeof AccountSettingsProfileRoute
  '/$account/_settings/relay': typeof AccountSettingsRelayRoute
  '/$account/_settings/wallet': typeof AccountSettingsWalletRoute
  '/columns/_layout/create-newsfeed': typeof ColumnsLayoutCreateNewsfeedRouteWithChildren
  '/columns/_layout/global': typeof ColumnsLayoutGlobalRoute
  '/columns/_layout/newsfeed': typeof ColumnsLayoutNewsfeedRoute
  '/columns/_layout/stories': typeof ColumnsLayoutStoriesRoute
  '/columns/_layout/gallery': typeof ColumnsLayoutGalleryLazyRoute
  '/columns/_layout/notification': typeof ColumnsLayoutNotificationLazyRoute
  '/columns/_layout/onboarding': typeof ColumnsLayoutOnboardingLazyRoute
  '/columns/_layout/search': typeof ColumnsLayoutSearchLazyRoute
  '/columns/_layout/trending': typeof ColumnsLayoutTrendingLazyRoute
  '/columns/_layout/create-newsfeed/f2f': typeof ColumnsLayoutCreateNewsfeedF2fRoute
  '/columns/_layout/create-newsfeed/users': typeof ColumnsLayoutCreateNewsfeedUsersRoute
  '/columns/_layout/groups/$id': typeof ColumnsLayoutGroupsIdRoute
  '/columns/_layout/interests/$id': typeof ColumnsLayoutInterestsIdRoute
  '/columns/_layout/events/$id': typeof ColumnsLayoutEventsIdLazyRoute
  '/columns/_layout/replies/$id': typeof ColumnsLayoutRepliesIdLazyRoute
  '/columns/_layout/users/$id': typeof ColumnsLayoutUsersIdLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/bootstrap-relays'
    | '/loading'
    | '/set-group'
    | '/set-interest'
    | '/new'
    | '/reset'
    | '/$account'
    | '/$account/backup'
    | '/columns'
    | '/zap/$id'
    | '/auth/connect'
    | '/auth/import'
    | '/auth/new'
    | '/editor'
    | '/$account/home'
    | '/$account/bitcoin-connect'
    | '/$account/general'
    | '/$account/profile'
    | '/$account/relay'
    | '/$account/wallet'
    | '/columns/create-newsfeed'
    | '/columns/global'
    | '/columns/newsfeed'
    | '/columns/stories'
    | '/columns/gallery'
    | '/columns/notification'
    | '/columns/onboarding'
    | '/columns/search'
    | '/columns/trending'
    | '/columns/create-newsfeed/f2f'
    | '/columns/create-newsfeed/users'
    | '/columns/groups/$id'
    | '/columns/interests/$id'
    | '/columns/events/$id'
    | '/columns/replies/$id'
    | '/columns/users/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/bootstrap-relays'
    | '/loading'
    | '/set-group'
    | '/set-interest'
    | '/new'
    | '/reset'
    | '/$account'
    | '/$account/backup'
    | '/columns'
    | '/zap/$id'
    | '/auth/connect'
    | '/auth/import'
    | '/auth/new'
    | '/editor'
    | '/$account/home'
    | '/$account/bitcoin-connect'
    | '/$account/general'
    | '/$account/profile'
    | '/$account/relay'
    | '/$account/wallet'
    | '/columns/create-newsfeed'
    | '/columns/global'
    | '/columns/newsfeed'
    | '/columns/stories'
    | '/columns/gallery'
    | '/columns/notification'
    | '/columns/onboarding'
    | '/columns/search'
    | '/columns/trending'
    | '/columns/create-newsfeed/f2f'
    | '/columns/create-newsfeed/users'
    | '/columns/groups/$id'
    | '/columns/interests/$id'
    | '/columns/events/$id'
    | '/columns/replies/$id'
    | '/columns/users/$id'
  id:
    | '__root__'
    | '/'
    | '/bootstrap-relays'
    | '/loading'
    | '/set-group'
    | '/set-interest'
    | '/new'
    | '/reset'
    | '/$account'
    | '/$account/_app'
    | '/$account/backup'
    | '/columns'
    | '/columns/_layout'
    | '/zap/$id'
    | '/$account/_settings'
    | '/auth/connect'
    | '/auth/import'
    | '/auth/new'
    | '/editor/'
    | '/$account/_app/home'
    | '/$account/_settings/bitcoin-connect'
    | '/$account/_settings/general'
    | '/$account/_settings/profile'
    | '/$account/_settings/relay'
    | '/$account/_settings/wallet'
    | '/columns/_layout/create-newsfeed'
    | '/columns/_layout/global'
    | '/columns/_layout/newsfeed'
    | '/columns/_layout/stories'
    | '/columns/_layout/gallery'
    | '/columns/_layout/notification'
    | '/columns/_layout/onboarding'
    | '/columns/_layout/search'
    | '/columns/_layout/trending'
    | '/columns/_layout/create-newsfeed/f2f'
    | '/columns/_layout/create-newsfeed/users'
    | '/columns/_layout/groups/$id'
    | '/columns/_layout/interests/$id'
    | '/columns/_layout/events/$id'
    | '/columns/_layout/replies/$id'
    | '/columns/_layout/users/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BootstrapRelaysRoute: typeof BootstrapRelaysRoute
  LoadingRoute: typeof LoadingRoute
  SetGroupRoute: typeof SetGroupRoute
  SetInterestRoute: typeof SetInterestRoute
  NewLazyRoute: typeof NewLazyRoute
  ResetLazyRoute: typeof ResetLazyRoute
  AccountRoute: typeof AccountRouteWithChildren
  ColumnsRoute: typeof ColumnsRouteWithChildren
  ZapIdRoute: typeof ZapIdRoute
  AuthConnectLazyRoute: typeof AuthConnectLazyRoute
  AuthImportLazyRoute: typeof AuthImportLazyRoute
  AuthNewLazyRoute: typeof AuthNewLazyRoute
  EditorIndexRoute: typeof EditorIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BootstrapRelaysRoute: BootstrapRelaysRoute,
  LoadingRoute: LoadingRoute,
  SetGroupRoute: SetGroupRoute,
  SetInterestRoute: SetInterestRoute,
  NewLazyRoute: NewLazyRoute,
  ResetLazyRoute: ResetLazyRoute,
  AccountRoute: AccountRouteWithChildren,
  ColumnsRoute: ColumnsRouteWithChildren,
  ZapIdRoute: ZapIdRoute,
  AuthConnectLazyRoute: AuthConnectLazyRoute,
  AuthImportLazyRoute: AuthImportLazyRoute,
  AuthNewLazyRoute: AuthNewLazyRoute,
  EditorIndexRoute: EditorIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/bootstrap-relays",
        "/loading",
        "/set-group",
        "/set-interest",
        "/new",
        "/reset",
        "/$account",
        "/columns",
        "/zap/$id",
        "/auth/connect",
        "/auth/import",
        "/auth/new",
        "/editor/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/bootstrap-relays": {
      "filePath": "bootstrap-relays.tsx"
    },
    "/loading": {
      "filePath": "loading.tsx"
    },
    "/set-group": {
      "filePath": "set-group.tsx"
    },
    "/set-interest": {
      "filePath": "set-interest.tsx"
    },
    "/new": {
      "filePath": "new.lazy.tsx"
    },
    "/reset": {
      "filePath": "reset.lazy.tsx"
    },
    "/$account": {
      "filePath": "$account",
      "children": [
        "/$account/_app",
        "/$account/backup",
        "/$account/_settings"
      ]
    },
    "/$account/_app": {
      "filePath": "$account/_app.tsx",
      "parent": "/$account",
      "children": [
        "/$account/_app/home"
      ]
    },
    "/$account/backup": {
      "filePath": "$account/backup.tsx",
      "parent": "/$account"
    },
    "/columns": {
      "filePath": "columns",
      "children": [
        "/columns/_layout"
      ]
    },
    "/columns/_layout": {
      "filePath": "columns/_layout.tsx",
      "parent": "/columns",
      "children": [
        "/columns/_layout/create-newsfeed",
        "/columns/_layout/global",
        "/columns/_layout/newsfeed",
        "/columns/_layout/stories",
        "/columns/_layout/gallery",
        "/columns/_layout/notification",
        "/columns/_layout/onboarding",
        "/columns/_layout/search",
        "/columns/_layout/trending",
        "/columns/_layout/groups/$id",
        "/columns/_layout/interests/$id",
        "/columns/_layout/events/$id",
        "/columns/_layout/replies/$id",
        "/columns/_layout/users/$id"
      ]
    },
    "/zap/$id": {
      "filePath": "zap.$id.tsx"
    },
    "/$account/_settings": {
      "filePath": "$account/_settings.lazy.tsx",
      "parent": "/$account",
      "children": [
        "/$account/_settings/bitcoin-connect",
        "/$account/_settings/general",
        "/$account/_settings/profile",
        "/$account/_settings/relay",
        "/$account/_settings/wallet"
      ]
    },
    "/auth/connect": {
      "filePath": "auth/connect.lazy.tsx"
    },
    "/auth/import": {
      "filePath": "auth/import.lazy.tsx"
    },
    "/auth/new": {
      "filePath": "auth/new.lazy.tsx"
    },
    "/editor/": {
      "filePath": "editor/index.tsx"
    },
    "/$account/_app/home": {
      "filePath": "$account/_app/home.tsx",
      "parent": "/$account/_app"
    },
    "/$account/_settings/bitcoin-connect": {
      "filePath": "$account/_settings/bitcoin-connect.tsx",
      "parent": "/$account/_settings"
    },
    "/$account/_settings/general": {
      "filePath": "$account/_settings/general.tsx",
      "parent": "/$account/_settings"
    },
    "/$account/_settings/profile": {
      "filePath": "$account/_settings/profile.tsx",
      "parent": "/$account/_settings"
    },
    "/$account/_settings/relay": {
      "filePath": "$account/_settings/relay.tsx",
      "parent": "/$account/_settings"
    },
    "/$account/_settings/wallet": {
      "filePath": "$account/_settings/wallet.tsx",
      "parent": "/$account/_settings"
    },
    "/columns/_layout/create-newsfeed": {
      "filePath": "columns/_layout/create-newsfeed.tsx",
      "parent": "/columns/_layout",
      "children": [
        "/columns/_layout/create-newsfeed/f2f",
        "/columns/_layout/create-newsfeed/users"
      ]
    },
    "/columns/_layout/global": {
      "filePath": "columns/_layout/global.tsx",
      "parent": "/columns/_layout"
    },
    "/columns/_layout/newsfeed": {
      "filePath": "columns/_layout/newsfeed.tsx",
      "parent": "/columns/_layout"
    },
    "/columns/_layout/stories": {
      "filePath": "columns/_layout/stories.tsx",
      "parent": "/columns/_layout"
    },
    "/columns/_layout/gallery": {
      "filePath": "columns/_layout/gallery.lazy.tsx",
      "parent": "/columns/_layout"
    },
    "/columns/_layout/notification": {
      "filePath": "columns/_layout/notification.lazy.tsx",
      "parent": "/columns/_layout"
    },
    "/columns/_layout/onboarding": {
      "filePath": "columns/_layout/onboarding.lazy.tsx",
      "parent": "/columns/_layout"
    },
    "/columns/_layout/search": {
      "filePath": "columns/_layout/search.lazy.tsx",
      "parent": "/columns/_layout"
    },
    "/columns/_layout/trending": {
      "filePath": "columns/_layout/trending.lazy.tsx",
      "parent": "/columns/_layout"
    },
    "/columns/_layout/create-newsfeed/f2f": {
      "filePath": "columns/_layout/create-newsfeed.f2f.tsx",
      "parent": "/columns/_layout/create-newsfeed"
    },
    "/columns/_layout/create-newsfeed/users": {
      "filePath": "columns/_layout/create-newsfeed.users.tsx",
      "parent": "/columns/_layout/create-newsfeed"
    },
    "/columns/_layout/groups/$id": {
      "filePath": "columns/_layout/groups.$id.tsx",
      "parent": "/columns/_layout"
    },
    "/columns/_layout/interests/$id": {
      "filePath": "columns/_layout/interests.$id.tsx",
      "parent": "/columns/_layout"
    },
    "/columns/_layout/events/$id": {
      "filePath": "columns/_layout/events.$id.lazy.tsx",
      "parent": "/columns/_layout"
    },
    "/columns/_layout/replies/$id": {
      "filePath": "columns/_layout/replies.$id.lazy.tsx",
      "parent": "/columns/_layout"
    },
    "/columns/_layout/users/$id": {
      "filePath": "columns/_layout/users.$id.lazy.tsx",
      "parent": "/columns/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
